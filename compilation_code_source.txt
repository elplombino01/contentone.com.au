'use client';

import { useEffect, useState } from 'react';
import { FaArrowUp } from 'react-icons/fa';

const BackToTop = () => {
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const toggleVisibility = () => {
      if (window.pageYOffset > 300) {
        setIsVisible(true);
      } else {
        setIsVisible(false);
      }
    };

    window.addEventListener('scroll', toggleVisibility);

    return () => window.removeEventListener('scroll', toggleVisibility);
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: 'smooth',
    });
  };

  return (
    <button
      className={`fixed bottom-4 right-4 bg-blue-500 text-white p-3 rounded-full shadow-lg hover:bg-blue-600 transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}
      onClick={scrollToTop}
    >
      <FaArrowUp />
    </button>
  );
};

export default BackToTop;

import Link from 'next/link';
import { FaGithub, FaLinkedin, FaTwitter } from 'react-icons/fa';

const Footer = () => {
  return (
    <footer className="bg-gray-800 text-white py-8">
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row justify-between items-center">
          <div className="text-center md:text-left mb-4 md:mb-0">
            <h3 className="text-xl font-bold">ContentOne</h3>
            <p className="text-gray-400">© {new Date().getFullYear()} Tous droits réservés.</p>
          </div>
          <div className="flex space-x-4">
            <Link href="https://github.com" passHref>
              <a target="_blank" rel="noopener noreferrer" aria-label="GitHub">
                <FaGithub className="text-2xl hover:text-gray-400" />
              </a>
            </Link>
            <Link href="https://linkedin.com" passHref>
              <a target="_blank" rel="noopener noreferrer" aria-label="LinkedIn">
                <FaLinkedin className="text-2xl hover:text-gray-400" />
              </a>
            </Link>
            <Link href="https://twitter.com" passHref>
              <a target="_blank" rel="noopener noreferrer" aria-label="Twitter">
                <FaTwitter className="text-2xl hover:text-gray-400" />
              </a>
            </Link>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

'use client';

import Link from 'next/link';
import { useState } from 'react';

const Header = () => {
  const [isOpen, setIsOpen] = useState(false);

  return (
    <header className="bg-white shadow-md">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center py-4">
          <div className="text-2xl font-bold">
            <Link href="/">ContentOne</Link>
          </div>
          <nav className="hidden md:flex space-x-8">
            <Link href="/#about">
              <a className="text-gray-600 hover:text-gray-900">À propos</a>
            </Link>
            <Link href="/#services">
              <a className="text-gray-600 hover:text-gray-900">Services</a>
            </Link>
            <Link href="/#case-studies">
              <a className="text-gray-600 hover:text-gray-900">Études de cas</a>
            </Link>
            <Link href="/#contact">
              <a className="text-gray-600 hover:text-gray-900">Contact</a>
            </Link>
          </nav>
          <div className="md:hidden">
            <button onClick={() => setIsOpen(!isOpen)}>
              <svg
                className="w-6 h-6"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d={isOpen ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16m-7 6h7'}
                ></path>
              </svg>
            </button>
          </div>
        </div>
        {isOpen && (
          <nav className="md:hidden pb-4">
            <Link href="/#about">
              <a className="block py-2 px-4 text-sm hover:bg-gray-100">À propos</a>
            </Link>
            <Link href="/#services">
              <a className="block py-2 px-4 text-sm hover:bg-gray-100">Services</a>
            </Link>
            <Link href="/#case-studies">
              <a className="block py-2 px-4 text-sm hover:bg-gray-100">Études de cas</a>
            </Link>
            <Link href="/#contact">
              <a className="block py-2 px-4 text-sm hover:bg-gray-100">Contact</a>
            </Link>
          </nav>
        )}
      </div>
    </header>
  );
};

export default Header;

import React from 'react';

interface CardProps {
  title: string;
  description: string;
  icon: React.ReactNode;
}

const Card: React.FC<CardProps> = ({ title, description, icon }) => {
  return (
    <div className="bg-white p-6 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300">
      <div className="flex items-center justify-center h-12 w-12 rounded-full bg-blue-500 text-white mb-4">
        {icon}
      </div>
      <h3 className="text-xl font-bold mb-2">{title}</h3>
      <p className="text-gray-600">{description}</p>
    </div>
  );
};

export default Card;

import React from 'react';

interface ResultMetricProps {
  value: string;
  label: string;
}

const ResultMetric: React.FC<ResultMetricProps> = ({ value, label }) => {
  return (
    <div className="text-center">
      <p className="text-4xl font-bold text-blue-500">{value}</p>
      <p className="text-gray-600">{label}</p>
    </div>
  );
};

export default ResultMetric;

import Image from 'next/image';

const AboutMe = () => {
  return (
    <section id="about" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="lg:flex lg:items-center">
          <div className="lg:w-1/2">
            <Image
              src="/images/Francois photo .webp"
              alt="François, fondateur de ContentOne"
              width={500}
              height={500}
              className="rounded-lg shadow-lg"
            />
          </div>
          <div className="lg:w-1/2 lg:pl-12 mt-8 lg:mt-0">
            <h2 className="text-3xl font-bold mb-4">À propos de moi</h2>
            <p className="text-gray-600 mb-4">
              Je suis François, le fondateur de ContentOne. Avec plus de 10 ans d'expérience en marketing de contenu et en SEO, j'aide les entreprises à accroître leur visibilité en ligne et à générer des leads qualifiés.
            </p>
            <p className="text-gray-600">
              Ma mission est de créer des stratégies de contenu sur mesure qui non seulement attirent, mais aussi convertissent votre audience cible.
            </p>
          </div>
        </div>
      </div>
    </section>
  );
};

export default AboutMe;

import Image from 'next/image';
import ResultMetric from '../primitives/ResultMetric';

const CaseStudies = () => {
  return (
    <section id="case-studies" className="py-20">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-12">Études de cas</h2>
        <div className="grid md:grid-cols-2 gap-12 items-center">
          <div>
            <h3 className="text-2xl font-bold mb-4">Winplex</h3>
            <p className="text-gray-600 mb-8">
              Winplex, une entreprise SaaS, a vu son trafic organique multiplié par 3 en 6 mois grâce à notre stratégie de contenu ciblée.
            </p>
            <div className="grid grid-cols-3 gap-4">
              <ResultMetric value="+200%" label="Trafic Organique" />
              <ResultMetric value="+150%" label="Leads Qualifiés" />
              <ResultMetric value="-30%" label="Coût par Lead" />
            </div>
          </div>
          <div>
            <Image
              src="/images/Winplex-Logo.webp"
              alt="Logo Winplex"
              width={500}
              height={300}
              className="rounded-lg"
            />
          </div>
        </div>
      </div>
    </section>
  );
};

export default CaseStudies;

'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { useState } from 'react';

const contactSchema = z.object({
  name: z.string().min(2, 'Le nom doit contenir au moins 2 caractères.').max(50, 'Le nom ne doit pas dépasser 50 caractères.'),
  email: z.string().email('Adresse e-mail invalide.').max(100, 'L\'email ne doit pas dépasser 100 caractères.'),
  message: z.string().min(10, 'Le message doit contenir au moins 10 caractères.').max(1000, 'Le message ne doit pas dépasser 1000 caractères.'),
});

type ContactFormInputs = z.infer<typeof contactSchema>;

const ContactForm = () => {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<ContactFormInputs>({
    resolver: zodResolver(contactSchema),
  });

  const onSubmit = async (data: ContactFormInputs) => {
    const response = await fetch('/api/contact', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });

    if (response.ok) {
      setIsSubmitted(true);
    }
  };

  if (isSubmitted) {
    return (
      <div className="text-center">
        <h3 className="text-2xl font-bold text-green-500">Merci !</h3>
        <p>Votre message a bien été envoyé. Je vous répondrai bientôt.</p>
      </div>
    );
  }

  return (
    <section id="contact" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-12">Contactez-moi</h2>
        <form onSubmit={handleSubmit(onSubmit)} className="max-w-xl mx-auto">
          <div className="mb-4">
            <label htmlFor="name" className="block text-gray-700 font-bold mb-2">
              Nom
            </label>
            <input
              type="text"
              id="name"
              {...register('name')}
              className="w-full px-3 py-2 border rounded-lg"
            />
            {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>}
          </div>
          <div className="mb-4">
            <label htmlFor="email" className="block text-gray-700 font-bold mb-2">
              Email
            </label>
            <input
              type="email"
              id="email"
              {...register('email')}
              className="w-full px-3 py-2 border rounded-lg"
            />
            {errors.email && <p className="text-red-500 text-sm mt-1">{errors.email.message}</p>}
          </div>
          <div className="mb-4">
            <label htmlFor="message" className="block text-gray-700 font-bold mb-2">
              Message
            </label>
            <textarea
              id="message"
              rows={5}
              {...register('message')}
              className="w-full px-3 py-2 border rounded-lg"
            ></textarea>
            {errors.message && <p className="text-red-500 text-sm mt-1">{errors.message.message}</p>}
          </div>
          <button
            type="submit"
            className="w-full bg-blue-500 text-white font-bold py-3 px-4 rounded-lg hover:bg-blue-600"
          >
            Envoyer
          </button>
        </form>
      </div>
    </section>
  );
};

export default ContactForm;

import Link from 'next/link';

const HeroSection = () => {
  return (
    <section className="bg-blue-600 text-white">
      <div className="container mx-auto px-4 text-center py-20">
        <h1 className="text-5xl font-bold mb-4">
          Transformez Votre Contenu en Croissance
        </h1>
        <p className="text-xl mb-8">
          Stratégies de contenu et SEO qui attirent, convertissent et fidélisent.
        </p>
        <Link href="/#contact">
          <a className="bg-white text-blue-600 font-bold py-3 px-8 rounded-full hover:bg-gray-200">
            Contactez-moi
          </a>
        </Link>
      </div>
    </section>
  );
};

export default HeroSection;

const PerfectMatch = () => {
  return (
    <section className="py-20 bg-blue-50">
      <div className="container mx-auto px-4 text-center">
        <h2 className="text-3xl font-bold mb-4">Est-ce que nous sommes un bon match ?</h2>
        <p className="max-w-3xl mx-auto text-gray-600">
          Je collabore avec des entreprises B2B, des startups SaaS et des agences qui cherchent à faire du contenu un pilier de leur croissance. Si vous êtes prêts à investir dans une stratégie à long terme, nous ferons des merveilles ensemble.
        </p>
      </div>
    </section>
  );
};

export default PerfectMatch;

import { FaBullhorn, FaPencilAlt, FaSearch } from 'react-icons/fa';
import Card from '../primitives/Card';

const services = [
  {
    icon: <FaSearch />,
    title: 'Stratégie SEO',
    description: 'Analyse de mots-clés, audit de site et stratégie de netlinking pour un maximum de visibilité.',
  },
  {
    icon: <FaPencilAlt />,
    title: 'Création de Contenu',
    description: 'Articles de blog, études de cas, livres blancs... Du contenu qui parle à votre audience et aux moteurs de recherche.',
  },
  {
    icon: <FaBullhorn />,
    title: 'Marketing de Contenu',
    description: 'Planification, création, distribution et analyse de la performance de votre contenu pour un ROI maximal.',
  },
];

const Services = () => {
  return (
    <section id="services" className="py-20">
      <div className="container mx-auto px-4">
        <h2 className="text-3xl font-bold text-center mb-12">Mes Services</h2>
        <div className="grid md:grid-cols-3 gap-8">
          {services.map((service, index) => (
            <Card key={index} {...service} />
          ))}
        </div>
      </div>
    </section>
  );
};

export default Services;

import Image from 'next/image';

const logos = [
  { src: '/images/124-shoes-logo.webp', alt: '124 Shoes' },
  { src: '/images/altea-logo.webp', alt: 'Altea' },
  { src: '/images/bad-workwear-logo.webp', alt: 'Bad Workwear' },
  { src: '/images/Winplex-Logo.webp', alt: 'Winplex' },
];

const TrustedBy = () => {
  return (
    <section className="py-12 bg-gray-100">
      <div className="container mx-auto px-4">
        <h3 className="text-center text-gray-500 text-sm font-bold uppercase tracking-wider mb-8">
          Ils m'ont fait confiance
        </h3>
        <div className="flex flex-wrap justify-center items-center gap-8">
          {logos.map((logo, index) => (
            <div key={index} className="relative h-12 w-32">
              <Image
                src={logo.src}
                alt={logo.alt}
                layout="fill"
                objectFit="contain"
              />
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default TrustedBy;

// This file can be used to define design tokens, reusable styles, etc.
// For example, using Tailwind CSS's plugin system or just exporting constants.

export const colors = {
  primary: '#3b82f6', // blue-500
  secondary: '#6b7280', // gray-500
  accent: '#10b981', // emerald-500
};

export const typography = {
  h1: 'text-5xl font-bold',
  h2: 'text-3xl font-bold',
  h3: 'text-2xl font-bold',
  body: 'text-base',
};

// This file is intended for GSAP animation logic.
// Example:
// import { gsap } from 'gsap';
// import { ScrollTrigger } from 'gsap/ScrollTrigger';

// gsap.registerPlugin(ScrollTrigger);

// export const animateOnScroll = (element: string, animationProps: any) => {
//   gsap.from(element, {
//     ...animationProps,
//     scrollTrigger: {
//       trigger: element,
//       start: 'top 80%',
//       toggleActions: 'play none none none',
//     },
//   });
// };
console.log("GSAP animations can be defined here.");

import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

import { NextResponse } from 'next/server';
import * as z from 'zod';

const contactSchema = z.object({
  name: z.string().min(2).max(50),
  email: z.string().email().max(100),
  message: z.string().min(10).max(1000),
});

export async function POST(request: Request) {
  try {
    const body = await request.json();
    contactSchema.parse(body);

    // Here you would typically send an email or save to a database
    // For this example, we'll just log it and return a success response
    console.log('Contact form submission:', body);

    return NextResponse.json({ message: 'Message sent successfully!' }, { status: 200 });
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json({ error: error.errors }, { status: 400 });
    }
    return NextResponse.json({ error: 'An unexpected error occurred.' }, { status: 500 });
  }
}

@tailwind base;
@tailwind components;
@tailwind utilities;

html {
  scroll-behavior: smooth;
}

import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import Header from "./_components/Header";
import Footer from "./_components/Footer";
import BackToTop from "./_components/BackToTop";

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "ContentOne - Stratégie de Contenu & SEO",
  description: "Stratégies de contenu et SEO qui attirent, convertissent et fidélisent. Transformez votre contenu en croissance.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr">
      <body className={inter.className}>
        <Header />
        <main>{children}</main>
        <Footer />
        <BackToTop />
      </body>
    </html>
  );
}

import AboutMe from "./_components/sections/AboutMe";
import CaseStudies from "./_components/sections/CaseStudies";
import ContactForm from "./_components/sections/ContactForm";
import HeroSection from "./_components/sections/HeroSection";
import PerfectMatch from "./_components/sections/PerfectMatch";
import Services from "./_components/sections/Services";
import TrustedBy from "./_components/sections/TrustedBy";

export default function Home() {
  return (
    <>
      <HeroSection />
      <TrustedBy />
      <Services />
      <AboutMe />
      <CaseStudies />
      <PerfectMatch />
      <ContactForm />
    </>
  );
}

import { MetadataRoute } from 'next';

export default function sitemap(): MetadataRoute.Sitemap {
  const baseUrl = 'https://contentone.com'; // Remplacez par votre domaine

  return [
    {
      url: baseUrl,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 1,
    },
    {
      url: `${baseUrl}/#about`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/#services`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/#case-studies`,
      lastModified: new Date(),
      changeFrequency: 'monthly',
      priority: 0.8,
    },
    {
      url: `${baseUrl}/#contact`,
      lastModified: new Date(),
      changeFrequency: 'yearly',
      priority: 0.5,
    },
  ];
}
